class Node:
    def __init__(self, data):
        self.__data = data
        self.__next = None

    def get_data(self):
        return self.__data

    def set_data(self, data):
        self.__data = data

    def get_next(self):
        return self.__next

    def set_next(self, next_node):
        self.__next = next_node


class LinkedList:
    def __init__(self):
        self.__head = None
        self.__tail = None

    def get_head(self):
        return self.__head

    def get_tail(self):
        return self.__tail

    def add(self, data):
        new_node = Node(data)
        if (self.__head is None):
            self.__head = self.__tail = new_node
        else:
            self.__tail.set_next(new_node)
            self.__tail = new_node
        # Remove pass and copy the code you had written to add an element.

    def display(self):
        temp = self.__head
        while (temp is not None):
            print(temp.get_data())
            temp = temp.get_next()
        # Remove pass and copy the code you had written to display the element(s).

    def find_node(self, data):
        pointer = self.__head
        while pointer != None:
            if pointer.get_data() == data:
                return pointer
            else:
                pointer = pointer.get_next()

        return None
        # Remove pass and write the logic to find the node and return the node if found or return None.

    def insert(self, data, data_before):
        pointer = self.__head
        new_node = Node(data)

        while pointer is not None:
            if pointer.get_data() == data_before:
                new_node.set_next(pointer.get_next())
                pointer.set_next(new_node)
                return
            else:
                pointer = pointer.get_next()

    def delete(self, data):
        current_node = self.__head
        prev_node = current_node

        while current_node != None:
            if current_node.get_data() == data:
                if current_node == self.__head:
                    self.__head = self.__head.get_next()
                    return
                if current_node == self.__tail:
                    self.__tail = prev_node
                    self.__tail.set_next(None)
                    return
                prev_node.set_next(current_node.get_next())
                current_node.set_next(None)
                return
            else:
                prev_node = current_node
                current_node = current_node.get_next()

    # You can use the below __str__() to print the elements of the DS object while debugging

    def __str__(self):
        temp = self.__head
        msg = []
        while (temp is not None):
            msg.append(str(temp.get_data()))
            temp = temp.get_next()
        msg = " ".join(msg)
        msg = "Linkedlist data(Head to Tail): " + msg
        return msg


list1 = LinkedList()
list1.add("Milk")
list1.add("Salt")
list1.add("Biscuits")
list1.add("Sugar")
list1.add("Apple Juice")
list1.add("Pomegranate")
list1.add("Watermelon")
list1.delete("Milk")
list1.display()
